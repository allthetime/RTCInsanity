diff --git a/client/js/file-filter.js b/client/js/file-filter.js
index 1c07846..7dbc0da 100644
--- a/client/js/file-filter.js
+++ b/client/js/file-filter.js
@@ -64,9 +64,21 @@ dragDrop('#dropzone', function(files){
   // does nothing if file is too big
   // see //FUCK in webtorrent.js
   // add error readout for user!
-  logAppend('Creating .torrent file...<br>')
+
+
+
   client.seed(files, function(torrent){
 
+    newTorrentDiv = $('<div id="'+torrent.infoHash+'">').appendTo('#filelist');
+    newTorrentFile = $('<a id="'+torrent.infoHash+'-torrent">').text(torrent.name);
+    newTorrentFile.attr('href','javascript:void(0);');
+    $('<span id="'+torrent.infoHash+'-progress">').text('0%').appendTo(newTorrentDiv)
+    newTorrentFile.appendTo(newTorrentDiv)
+    newTorrentDiv.appendTo('#filelist')
+    newTorrentFile.on('click', function(e){
+      download(e.target.id.split('-torrent')[0]);
+    });
+
     eachActiveConnection(function(c, $c) {
       if (c.label === 'torrentz') {
         c.send([torrent.infoHash,torrent.name]);
diff --git a/client/js/rtos.js b/client/js/rtos.js
index 6f2c502..ab53d46 100644
--- a/client/js/rtos.js
+++ b/client/js/rtos.js
@@ -201,14 +201,27 @@ $(document).ready(function() {
     } else if (c.label === 'torrentz') {
 
       c.on('data', function(data) {
+
+        console.log(data);
         var infoHash = data[0]
         var fileName = data[1]
-        newTorrentFile = $('<a id="'+infoHash+'">').text(fileName);
-        newTorrentFile.attr('href','javascript:void(0);');
-        newTorrentFile.appendTo('#filelist')
-        newTorrentFile.on('click', function(e){
-          download(e.target.id);
-        });
+        console.log(infoHash)
+        console.log(fileName)
+
+        // var newDiv = $('<div id="'+infoHash+'">')
+        
+        // var newTorrentFile = $('<a id="'+infoHash+'-torrent">').text(fileName);
+        // newTorrentFile.attr('href','javascript:void(0);');
+        
+        // $('<span id="'+infoHash+'-progress">').text('0%').appendTo(newTorrentDiv)
+        // newTorrentFile.appendTo(newTorrentDiv)
+
+        // newTorrentDiv.appendTo('#filelist');
+
+        // newTorrentFile.on('click', function(e){
+        //   download(e.target.id.split('-torrent')[0]);
+        // });
+
       });
 
     // Send mouse position of moving mouse to user
diff --git a/client/js/script.js b/client/js/script.js
index 15802c7..4869499 100644
--- a/client/js/script.js
+++ b/client/js/script.js
@@ -47,11 +47,7 @@ function startDownloadServer(usernameFromPeerJS,roomNameFromPeerJS) {
 
 /* adds small text to chat */
 function systemMessage(msg) {
-  var messages = document.getElementById('messages');
-  msg = sanitize(msg);
-  msg = '<strong class="small" style="padding-left: 15px">' + msg + '</strong>';
-  messages.innerHTML = messages.innerHTML + msg + '<br>';
-  messages.scrollTop = 10000;
+
 }
 
 /* Use this to avoid xss
@@ -127,11 +123,11 @@ function init(roomNameFromPeerJS) {
      $('#pleasewait').hide();
      $('#chatinput').show();//show the text input box now
      accept_inbound_files();
-     if (username_arr.length > 0) {
-       systemMessage("Other users currently in the room: " + usernames_list);
-     } else {
-       systemMessage("There are no other users currently in this room!");
-     }
+     // if (username_arr.length > 0) {
+     //  systemMessage("Other users currently in the room: " + usernames_list);
+     // } else {
+     //  systemMessage("There are no other users currently in this room!");
+     // }
    });
    
    /* when a new user's data channel is opened and we are offering a file, tell them */
@@ -139,14 +135,14 @@ function init(roomNameFromPeerJS) {
      /* add to usernames list */
      create_or_clear_container(id, username);
      /* log a message (we do this in crypto.js if crypto is enabled) */
-     systemMessage('now connected to ' + username);
+     // systemMessage('now connected to ' + username);
        /* if we have a file, send it their way */
      send_meta(id);
    });
    
    /* when another user disconnects */
    rtc.on('disconnect stream', function(disconnecting_socket, disconnecting_username) {
-     systemMessage(disconnecting_username + " has left the room");
+     // systemMessage(disconnecting_username + " has left the room");
      remove_container(disconnecting_socket);
    });
    
diff --git a/client/lib/file-io.js b/client/lib/file-io.js
index 2f8278b..111d0f1 100644
--- a/client/lib/file-io.js
+++ b/client/lib/file-io.js
@@ -202,7 +202,7 @@ function process_inbound_files(file) {
  this.meta.browser = $.browser.name; /* need browser name to set chunk size */
  console.log(this.meta);
  send_meta();
- systemMessage("file ready to send");
+ // systemMessage("file ready to send");
  /* user 0 is this user! */
  create_upload_stop_link(file_to_upload.name, 0, username);
 }
@@ -558,7 +558,7 @@ function create_pre_file_link(meta, id, username) {
  filecontainer.appendChild(a);
 
  //append to chat
- systemMessage(username +" is now offering file " + meta.name);
+ // systemMessage(username +" is now offering file " + meta.name);
 }
 
 /* update a file container with a DL % */
@@ -631,7 +631,7 @@ function create_file_link (meta, id, username, fileEntry) {
 
  
  //append to chat
- systemMessage(username +"'s file " + meta.name + " is ready to save locally");
+ // systemMessage(username +"'s file " + meta.name + " is ready to save locally");
 }
 
 /* send out meta data, allow for id to be empty = broadcast */
diff --git a/client/lib/webtorrent.js b/client/lib/webtorrent.js
index 990c43b..655d232 100644
--- a/client/lib/webtorrent.js
+++ b/client/lib/webtorrent.js
@@ -46,21 +46,23 @@ download = function(infoHash) {
 
 onTorrent = function(torrent) {
   
-  logAppend('Torrent info hash: ' + torrent.infoHash + ' <a href="/#'+torrent.infoHash+'">(link)</a><br>')
-  logAppend('Downloading from ' + torrent.swarm.wires.length + ' peers<br>')
-  logAppend('progress: starting...')
+  var progressSpan = $('#'+torrent.infoHash+'-progress');
 
   torrent.swarm.on('download', function () {
     var progress = (100 * torrent.downloaded / torrent.parsedTorrent.length).toFixed(1)
-    logReplace('progress: ' + progress + '% -- download speed: ' + prettysize(torrent.swarm.downloadSpeed()) + '/s<br>')
-  })
+    // logReplace('progress: ' + progress + '% -- download speed: ' + prettysize(torrent.swarm.downloadSpeed()) + '/s<br>')
+    progressSpan.html(progress+"%");
+    //$('<span id="'+torrent.infoHash+'-progress">').text(progress+'%');
+  });
 
   torrent.swarm.on('upload', function () {
-    logReplace('upload speed:' + prettysize(client.uploadSpeed()) + '/s<br>')
+    // logReplace('upload speed:' + prettysize(client.uploadSpeed()) + '/s<br>')
   })
 
   torrent.files.forEach(function (file) {
     var extname = path.extname(file.name)
+
+    console.log(2)
     // if (extname === '.mp4' || extname === '.webm') {
     //   var video = document.createElement('video')
     //   video.controls = true
@@ -68,27 +70,29 @@ onTorrent = function(torrent) {
     //   file.createReadStream().pipe(video)
     // } else {
       file.createReadStream().pipe(concat(function (buf) {
-        var a = document.createElement('a')
+        var a = document.getElementById(torrent.infoHash+'-torrent') 
         a.download = file.name
         a.href = URL.createObjectURL(new Blob([ buf ]))
-        a.textContent = 'download ' + file.name
-        log.innerHTML += a.outerHTML + '<br>'
-
-        play_file(a.href, file.name, file.type);
+        a.innerHTML = 'download ' + file.name
+        // $(a).appendTo('#filelist')
+        console.log("FILE READY" + a.href);
 
+        play_torrent_file(a.href, file.name, file.type);
 
       }))
     // }
   })
 }
 
-function play_file(url, title, type) {
+function play_torrent_file(url, title, type) {
   
   var audio;
   var playlist;
   var tracks;
   var current;
 
+
+
   $('<li id="'+title+'"><a href=' + url + '>' + title + '</a></li>').appendTo('#playlist');
 
   initPlaylist();
